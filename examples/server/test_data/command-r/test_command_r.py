import cohere, json
import os

API_KEY = os.environ.get("API_KEY") 
co = cohere.Client(API_KEY)

# tool descriptions that the model has access to
tools = [
   {
       "name": "query_daily_sales_report",
       "description": "Connects to a database to retrieve overall sales volumes and sales information for a given day.",
       "parameter_definitions": {
           "day": {
               "description": "Retrieves sales data for this day, formatted as YYYY-MM-DD.",
               "type": "str",
               "required": True
           }
       }
   },
   {
       "name": "query_product_catalog",
       "description": "Connects to a a product catalog with information about all the products being sold, including categories, prices, and stock levels.",
       "parameter_definitions": {
           "category": {
               "description": "Retrieves product information data for all products in this category.",
               "type": "str",
               "required": True
           }
       }
   }
]


# preamble containing instructions about the task and the desired style for the output.
preamble = """
## Task & Context
You help people answer their questions and other requests interactively. You will be asked a very wide array of requests on all kinds of topics. You will be equipped with a wide range of search engines or similar tools to help you, which you use to research your answer. You should focus on serving the user's needs as best you can, which will be wide-ranging.

## Style Guide
Unless the user asks for a different style of answer, you should answer in full sentences, using proper grammar and spelling.
"""

message = "Can you provide a sales summary for 29th September 2023, and also give me some details about the products in the 'Electronics' category, for example their prices and stock levels?"


def step1():
    # user request
    response = co.chat(
    message=message,
    tools=tools,
    preamble=preamble,
    model="command-r"
    )

    print('response:', response)
    return response


tool_call_results = [
   {
       "call": {
           "name": "query_daily_sales_report",
           "parameters": {
               "day": "2023-09-29"
           },
           "generation_id": "4807c924-9003-4d6b-8069-eda03962c465"
       },
       "outputs": [
           {
               "date": "2023-09-29",
               "summary": "Total Sales Amount: 10000, Total Units Sold: 250"
           }
       ]
   },
   {
       "call": {
           "name": "query_product_catalog",
           "parameters": {
               "category": "Electronics"
           },
           "generation_id": "4807c924-9003-4d6b-8069-eda03962c465"
       },
       "outputs": [
           {
               "category": "Electronics",
               "products": [
                   {
                       "product_id": "E1001",
                       "name": "Smartphone",
                       "price": 500,
                       "stock_level": 20
                   },
                   {
                       "product_id": "E1002",
                       "name": "Laptop",
                       "price": 1000,
                       "stock_level": 15
                   },
                   {
                       "product_id": "E1003",
                       "name": "Tablet",
                       "price": 300,
                       "stock_level": 25
                   }
               ]
           }
       ]
   }
]

def step234(response):
    tool_results = []
    # Iterate over the tool calls generated by the model
    for tool_call, output in zip(response.tool_calls, tool_call_results):
        # here is where you would call the tool recommended by the model, using the parameters recommended by the model
        # output = functions_map[tool_call.name](**tool_call.parameters)
        # store the output in a list
        outputs = [output]
        # store your tool results in this format
        tool_results.append({
            "call": tool_call,
            "outputs": outputs
        })
    
    response = co.chat(
        message=message,
        tools=tools,
        tool_results=tool_results,
        preamble=preamble,
        model="command-r",
        temperature=0.3
        )

    print("Final answer:")
    print(response.text)

    print("Citations that support the final answer:")
    for cite in response.citations:
        print(cite)


default_multi_hop_instruction = """Carefully perform the following instructions, in order, starting each with a new line.
Firstly, You may need to use complex and advanced reasoning to complete your task and answer the question. Think about how you can use the provided tools to answer the question and come up with a high level plan you will execute.
Write 'Plan:' followed by an initial high level plan of how you will solve the problem including the tools and steps required.
Secondly, Carry out your plan by repeatedly using actions, reasoning over the results, and re-evaluating your plan. Perform Action, Observation, Reflection steps with the following format. Write 'Action:' followed by a json formatted action containing the "tool_name" and "parameters"
 Next you will analyze the 'Observation:', this is the result of the action.
After that you should always think about what to do next. Write 'Reflection:' followed by what you've figured out so far, any changes you need to make to your plan, and what you will do next including if you know the answer to the question.
... (this Action/Observation/Reflection can repeat N times)
Thirdly, Decide which of the retrieved documents are relevant to the user's last input by writing 'Relevant Documents:' followed by comma-separated list of document numbers. If none are relevant, you should instead write 'None'.
Fourthly, Decide which of the retrieved documents contain facts that should be cited in a good answer to the user's last input by writing 'Cited Documents:' followed a comma-separated list of document numbers. If you dont want to cite any of them, you should instead write 'None'.
Fifthly, Write 'Answer:' followed by a response to the user's last input in high quality natural english. Use the retrieved documents to help you. Do not insert any citations or grounding markup.
Finally, Write 'Grounded answer:' followed by a response to the user's last input in high quality natural english. Use the symbols <co: doc> and </co: doc> to indicate when a fact comes from a document in the search result, e.g <co: 4>my fact</co: 4> for a fact from document 4."""  # noqa: E501

print(default_multi_hop_instruction)

# response = step1()
# step234(response)